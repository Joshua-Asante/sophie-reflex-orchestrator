# SOPHIE Windsurf Cloud Deployment Configuration
# Full system deployment for production and staging environments
version: '3.8'

services:
  # Production SOPHIE Orchestrator
  sophie-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: production
    container_name: sophie-orchestrator-prod
    ports:
      - "8000:8000"  # Main API
      - "8001:8001"  # HITL interface
      - "9323:9323"  # Metrics
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - CHROMA_HOST=chromadb
      - REDIS_HOST=redis
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GLM_API_KEY=${GLM_API_KEY}
    volumes:
      - sophie_memory:/app/memory
      - sophie_logs:/app/logs
      - sophie_configs:/app/configs
    depends_on:
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "sophie.ai=true"
      - "environment=production"
      - "service=orchestrator"

  # Production Frontend
  sophie-frontend:
    build:
      context: ../ui
      dockerfile: Dockerfile.prod
    container_name: sophie-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_ORCHESTRATOR_URL=${NEXT_PUBLIC_ORCHESTRATOR_URL}
      - NEXT_PUBLIC_HITL_URL=${NEXT_PUBLIC_HITL_URL}
      - NEXT_PUBLIC_OPENROUTER_API_KEY=${NEXT_PUBLIC_OPENROUTER_API_KEY}
    depends_on:
      - sophie-orchestrator
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "sophie.ai=true"
      - "environment=production"
      - "service=frontend"

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: sophie-chromadb-prod
    ports:
      - "8004:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - ALLOW_RESET=TRUE
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "sophie.ai=true"
      - "environment=production"
      - "service=chromadb"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sophie-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    labels:
      - "sophie.ai=true"
      - "environment=production"
      - "service=redis"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sophie-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - sophie-frontend
      - sophie-orchestrator
    networks:
      - sophie-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    labels:
      - "sophie.ai=true"
      - "environment=production"
      - "service=nginx"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sophie-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.prod.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=10GB'
    networks:
      - sophie-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    labels:
      - "sophie.ai=true"
      - "environment=production"
      - "service=prometheus"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sophie-grafana-prod
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - sophie-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    labels:
      - "sophie.ai=true"
      - "environment=production"
      - "service=grafana"

volumes:
  sophie_memory:
    driver: local
  sophie_logs:
    driver: local
  sophie_configs:
    driver: local
  chromadb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sophie-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.80.0.0/16
    driver_opts:
      com.docker.network.bridge.name: sophie-prod-br0 