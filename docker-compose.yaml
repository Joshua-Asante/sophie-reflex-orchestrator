  # Sophie Reflex Orchestrator (Modular Architecture)
services:
  sophie-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: production
    container_name: sophie-orchestrator
    ports:
      - "8000:8000"  # Main API port
      - "8001:8001"  # HITL web interface
    environment:
      - CHROMA_HOST=chromadb
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      # API Keys (set these in your .env file)
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    volumes:
      - ./configs:/app/configs:ro
      - ./memory:/app/memory
      - ./logs:/app/logs
      - ./orchestrator:/app/orchestrator:ro
    depends_on:
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Development version with testing capabilities
  sophie-orchestrator-dev:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: development
    container_name: sophie-orchestrator-dev
    ports:
      - "8002:8000"  # Different port for dev
      - "8003:8001"  # Different port for dev HITL
    environment:
      - CHROMA_HOST=chromadb
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    volumes:
      - ./configs:/app/configs:ro
      - ./memory:/app/memory
      - ./logs:/app/logs
      - ./orchestrator:/app/orchestrator
      - ./tests:/app/tests
    depends_on:
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sophie-network
    restart: unless-stopped
    profiles:
      - development
    command: ["test"]

  # ChromaDB Vector Database (Optimized)
  chromadb:
    image: chromadb/chroma:latest
    container_name: sophie-chromadb
    ports:
      - "8004:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - ALLOW_RESET=TRUE
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis for caching and session management (Optimized)
  redis:
    image: redis:7-alpine
    container_name: sophie-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx Reverse Proxy (Enhanced)
  nginx:
    image: nginx:alpine
    container_name: sophie-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ui/static:/usr/share/nginx/html/static:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - sophie-orchestrator
    networks:
      - sophie-network
    restart: unless-stopped
    profiles:
      - proxy
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Prometheus for monitoring (Enhanced)
  prometheus:
    image: prom/prometheus:latest
    container_name: sophie-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=2GB'
    networks:
      - sophie-network
    restart: unless-stopped
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Grafana for visualization (Enhanced)
  grafana:
    image: grafana/grafana:latest
    container_name: sophie-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - sophie-network
    restart: unless-stopped
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Jaeger for distributed tracing (Optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: sophie-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - sophie-network
    restart: unless-stopped
    profiles:
      - tracing
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  chromadb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sophie-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: sophie-br0
