services:
  # Sophie Reflex Orchestrator
  sophie-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sophie-orchestrator
    ports:
      - "8000:8000"  # Main API port
      - "8001:8001"  # HITL web interface
    environment:
      - CHROMA_HOST=chromadb
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      # API Keys (set these in your .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    volumes:
      - ./configs:/app/configs
      - ./memory:/app/memory
      - ./logs:/app/logs
    depends_on:
      - chromadb
      - redis
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: sophie-chromadb
    ports:
      - "8002:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - ALLOW_RESET=TRUE
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: sophie-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sophie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: sophie-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ui/static:/usr/share/nginx/html/static:ro
    depends_on:
      - sophie-orchestrator
    networks:
      - sophie-network
    restart: unless-stopped
    profiles:
      - proxy

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sophie-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sophie-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: sophie-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - sophie-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  chromadb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sophie-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16